# Fonction modele
simulate_sei_step <- function(timepoints, input, parameters){
dS <- dI <- numeric(m)
with(parameters, {
S <- input[1]
I <- input[2]
beta1=betaTradeOff(alph);
# ODEs
# dS <- (b*(S+I))*(1-((S+I)/K))-(beta1)*S*I-(d+epsilonS+theta)*S
# dI <- (beta1)*S*I+theta*S-(alph+epsilonI+d)*I
#
dS <- b-(beta1)*S*I-(d+epsilonS+theta)*S
dI <- (beta1)*S*I+theta*S-(alph+epsilonI+d)*I
dY <- c(dS, dI)
list(dY)
})
}
epsilonS=0    #	pression de prédation sur les sains
epsilonI=0   #	pression de prédation sur les tumoraux
theta=0      #	occurrence naturelle des tumeurs
d=0.2           #	d = mortalité naturelle
b=200              #	b = natalité
K=1000          #	K = capacité de charge
#paramètre trade off
a=0.0007
c=100
#	mortalité liée aux tumeurs lié par le trade off à beta (transmsision des tumeurs)
alpha=seq(from=0,to=0.05,length.out=10)
plot(alpha,betaTradeOff(alpha),type="l")
input <- c(999,1)
m=500
timepoints <- seq(0,m, by = 1)
S100<-c(rep(0,length(alpha)))
I100<-c(rep(0,length(alpha)))
for (k in 1:length(alpha)){
#k=5
input <- c(999,1)
alph=alpha[k];
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
plot(output[,2])
#plot(data$'1'~data$time,type='l',col="green",ylim=c(0,K))
#par(new=TRUE)
#plot(data$'I'~data$time,type='l',col="red",ylim=c(0,K))
S100[k]<-output[201,2]
I100[k]<-output[201,3]
}
S100
plot(S100~alpha,type='l',col="#009966",lwd=2,ylim=c(0,K),ylab="",xlab="alpha")
par(new=TRUE)
plot(I100~alpha,type='l',col="red",lwd=2,ylim=c(0,K),ylab="",xlab="alpha")
Imutalpha<-as.data.frame(t(alpha))
for (j in 1:length(S100)){
input <- c(S=S100[j], I=1)
for (k in 1:length(alpha)){
alph=alpha[k]
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
if(output[201,3]>1){
Imut[k] <-1;
}
}
Imutalpha<-rbind(Imutalpha,Imut)
}
Imutalpha
?rep
Imut[k] <-rep(0,10)
Imut
Imut <-rep(0,10)
for (j in 1:length(S100)){
input <- c(S=S100[j], I=1)
for (k in 1:length(alpha)){
alph=alpha[k]
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
if(output[201,3]>1){
Imut[k] <-1;
}
}
Imutalpha<-rbind(Imutalpha,Imut)
}
Imutalpha
j=1
input <- c(S=S100[j], I=1)
for (k in 1:length(alpha)){
alph=alpha[k]
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
if(output[201,3]>1){
Imut[k] <-1;
}
}
Imut
Imutalpha<-rbind(Imutalpha,Imut)
rm(list=ls())
library(ggplot2)
betaTradeOff <-function(alph){
return(a*(1-exp(-c*alph)))
}
# Fonction modele
simulate_sei_step <- function(timepoints, input, parameters){
dS <- dI <- dI2 <- numeric(m)
with(parameters, {
S <- input[1]
I <- input[2]
I2 <- input[3]
beta1=betaTradeOff(alph);
beta2=betaTradeOff(alph2);
# ODEs
# dS <- (b*(S+I))*(1-((S+I)/K))-(beta1)*S*I-(d+epsilonS+theta)*S
# dI <- (beta1)*S*I+theta*S-(alph+epsilonI+d)*I
#
dS <- (b*(S+I))*(1-((S+I)/K))-(beta1)*S*I-(beta2)*S*I2-(d+epsilonS+theta)*S
dI <- (beta1)*S*I+theta*S-(alph+epsilonI+d)*I
dI <- (beta2)*S*I2+theta*S-(alph+epsilonI+d)*I2
dY <- c(dS, dI, dI2)
list(dY)
})
}
epsilonS=0    #	pression de prédation sur les sains
epsilonI=0   #	pression de prédation sur les tumoraux
theta=0      #	occurrence naturelle des tumeurs
d=0.2           #	d = mortalité naturelle
b=2              #	b = natalité
K=1000          #	K = capacité de charge
#paramètre trade off
a=0.0007
c=100
#	mortalité liée aux tumeurs lié par le trade off à beta (transmsision des tumeurs)
alpha=seq(from=0,to=0.05,length.out=10)
plot(alpha,betaTradeOff(alpha),type="l")
input <- c(999,1)
m=500
timepoints <- seq(0,m, by = 1)
S100<-c(rep(0,length(alpha)))
I100<-c(rep(0,length(alpha)))
I2100<-c(rep(0,length(alpha)))
for (k in 1:length(alpha)){
#k=5
input <- c(999,1,0)
alph=alpha[k];
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
plot(output[,2])
#plot(data$'1'~data$time,type='l',col="green",ylim=c(0,K))
#par(new=TRUE)
#plot(data$'I'~data$time,type='l',col="red",ylim=c(0,K))
S100[k]<-output[201,2]
I100[k]<-output[201,3]
I2100[k]<-output[201,4]
}
for (k in 1:length(alpha)){
#k=5
input <- c(999,1,0)
alph=alpha[k];
alph2=alpha[k];
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
plot(output[,2])
#plot(data$'1'~data$time,type='l',col="green",ylim=c(0,K))
#par(new=TRUE)
#plot(data$'I'~data$time,type='l',col="red",ylim=c(0,K))
S100[k]<-output[201,2]
I100[k]<-output[201,3]
I2100[k]<-output[201,4]
}
k=5
#k=5
input <- c(999,1,0)
alph=alpha[k];
alph2=alpha[k];
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
debugSource("~/Mon Drive/dump/PIPV2.R")
input
rm(list=ls())
library(ggplot2)
betaTradeOff <-function(alph){
return(a*(1-exp(-c*alph)))
}
# Fonction modele
simulate_sei_step <- function(timepoints, input, parameters){
dS <- dI <- dI2 <- numeric(m)
with(parameters, {
S <- input[1]
I <- input[2]
I2 <- input[3]
beta1=betaTradeOff(alph);
beta2=betaTradeOff(alph2);
# ODEs
# dS <- (b*(S+I))*(1-((S+I)/K))-(beta1)*S*I-(d+epsilonS+theta)*S
# dI <- (beta1)*S*I+theta*S-(alph+epsilonI+d)*I
#
dS <- (b*(S+I))*(1-((S+I)/K))-(beta1)*S*I-(beta2)*S*I2-(d+epsilonS+theta)*S
dI <- (beta1)*S*I+theta*S-(alph+epsilonI+d)*I
dI2 <- (beta2)*S*I2+theta*S-(alph+epsilonI+d)*I2
dY <- c(dS, dI, dI2)
list(dY)
})
}
epsilonS=0    #	pression de prédation sur les sains
epsilonI=0   #	pression de prédation sur les tumoraux
theta=0      #	occurrence naturelle des tumeurs
d=0.2           #	d = mortalité naturelle
b=2              #	b = natalité
K=1000          #	K = capacité de charge
#paramètre trade off
a=0.0007
c=100
#	mortalité liée aux tumeurs lié par le trade off à beta (transmsision des tumeurs)
alpha=seq(from=0,to=0.05,length.out=10)
plot(alpha,betaTradeOff(alpha),type="l")
input <- c(999,1)
m=500
timepoints <- seq(0,m, by = 1)
S100<-c(rep(0,length(alpha)))
I100<-c(rep(0,length(alpha)))
I2100<-c(rep(0,length(alpha)))
for (k in 1:length(alpha)){
#k=5
input <- c(999,1,0)
alph=alpha[k];
alph2=alpha[k];
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
plot(output[,2])
#plot(data$'1'~data$time,type='l',col="green",ylim=c(0,K))
#par(new=TRUE)
#plot(data$'I'~data$time,type='l',col="red",ylim=c(0,K))
S100[k]<-output[201,2]
I100[k]<-output[201,3]
I2100[k]<-output[201,4]
}
S100
plot(S100~alpha,type='l',col="#009966",lwd=2,ylim=c(0,K),ylab="",xlab="alpha")
par(new=TRUE)
plot(I100~alpha,type='l',col="red",lwd=2,ylim=c(0,K),ylab="",xlab="alpha")
par(new=TRUE)
plot(I2100~alpha,type='l',col="blue",lwd=2,ylim=c(0,K),ylab="",xlab="alpha")
Imutalpha<-as.data.frame(t(alpha))
Imut <-rep(0,10)
for (j in 1:length(S100)){
input <- c(S=S100[j], I=I100[j],1)
for (k in 1:length(alpha)){
alph=alpha[k]
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
if(output[201,4]>1){
Imut[k] <-1;
}
}
Imutalpha<-rbind(Imutalpha,Imut)
}
Imutalpha
j=3
for (j in 1:length(S100)){
input <- c(S=S100[j], I=I100[j],1)
alph=alpha[j]
for (k in 1:length(alpha)){
alph2=alpha[k]
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
if(output[201,4]>1){
Imut[k] <-1;
}
}
Imutalpha<-rbind(Imutalpha,Imut)
}
Imutalpha
j=3
k=5
input <- c(S=S100[j], I=I100[j],1)
input
sum(input)
alph=alpha[j]
alph
alph2=alpha[k]
alph2
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
plot(output[,2])
S100
plot(output[,3])
plot(output[,4])
plot(output[,2])
# Fonction modele
simulate_sei_step <- function(timepoints, input, parameters){
dS <- dI <- dI2 <- numeric(m)
with(parameters, {
S <- input[1]
I <- input[2]
I2 <- input[3]
beta1=betaTradeOff(alph);
beta2=betaTradeOff(alph2);
# ODEs
# dS <- (b*(S+I))*(1-((S+I)/K))-(beta1)*S*I-(d+epsilonS+theta)*S
# dI <- (beta1)*S*I+theta*S-(alph+epsilonI+d)*I
#
dS <- (b*(S+I+I2))*(1-((S+I+I2)/K))-(beta1)*S*I-(beta2)*S*I2-(d+epsilonS+theta)*S
dI <- (beta1)*S*I+theta*S-(alph+epsilonI+d)*I
dI2 <- (beta2)*S*I2+theta*S-(alph+epsilonI+d)*I2
dY <- c(dS, dI, dI2)
list(dY)
})
}
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
plot(output[,3])
plot(output[,2])
plot(output[,4])
rm(list=ls())
library(ggplot2)
betaTradeOff <-function(alph){
return(a*(1-exp(-c*alph)))
}
# Fonction modele
simulate_sei_step <- function(timepoints, input, parameters){
dS <- dI <- dI2 <- numeric(m)
with(parameters, {
S <- input[1]
I <- input[2]
I2 <- input[3]
beta1=betaTradeOff(alph);
beta2=betaTradeOff(alph2);
# ODEs
# dS <- (b*(S+I))*(1-((S+I)/K))-(beta1)*S*I-(d+epsilonS+theta)*S
# dI <- (beta1)*S*I+theta*S-(alph+epsilonI+d)*I
#
dS <- (b*(S+I+I2))*(1-((S+I+I2)/K))-(beta1)*S*I-(beta2)*S*I2-(d+epsilonS+theta)*S
dI <- (beta1)*S*I+theta*S-(alph+epsilonI+d)*I
dI2 <- (beta2)*S*I2+theta*S-(alph+epsilonI+d)*I2
dY <- c(dS, dI, dI2)
list(dY)
})
}
epsilonS=0    #	pression de prédation sur les sains
epsilonI=0   #	pression de prédation sur les tumoraux
theta=0      #	occurrence naturelle des tumeurs
d=0.2           #	d = mortalité naturelle
b=2              #	b = natalité
K=1000          #	K = capacité de charge
#paramètre trade off
a=0.0007
c=100
#	mortalité liée aux tumeurs lié par le trade off à beta (transmsision des tumeurs)
alpha=seq(from=0,to=0.05,length.out=10)
plot(alpha,betaTradeOff(alpha),type="l")
input <- c(999,1)
m=500
timepoints <- seq(0,m, by = 1)
S100<-c(rep(0,length(alpha)))
I100<-c(rep(0,length(alpha)))
I2100<-c(rep(0,length(alpha)))
for (k in 1:length(alpha)){
#k=5
input <- c(999,1,0)
alph=alpha[k];
alph2=alpha[k];
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
plot(output[,2])
#plot(data$'1'~data$time,type='l',col="green",ylim=c(0,K))
#par(new=TRUE)
#plot(data$'I'~data$time,type='l',col="red",ylim=c(0,K))
S100[k]<-output[201,2]
I100[k]<-output[201,3]
I2100[k]<-output[201,4]
}
S100
plot(S100~alpha,type='l',col="#009966",lwd=2,ylim=c(0,K),ylab="",xlab="alpha")
par(new=TRUE)
plot(I100~alpha,type='l',col="red",lwd=2,ylim=c(0,K),ylab="",xlab="alpha")
par(new=TRUE)
plot(I2100~alpha,type='l',col="blue",lwd=2,ylim=c(0,K),ylab="",xlab="alpha")
Imutalpha<-as.data.frame(t(alpha))
Imut <-rep(0,10)
for (j in 1:length(S100)){
input <- c(S=S100[j], I=I100[j],1)
alph=alpha[j]
for (k in 1:length(alpha)){
alph2=alpha[k]
output <- deSolve::lsoda(input, timepoints, simulate_sei_step,NULL)
if(output[201,4]>1){
Imut[k] <-1;
}
}
Imutalpha<-rbind(Imutalpha,Imut)
}
Imutalpha
S100
I100
j=5
#	mortalité liée aux tumeurs lié par le trade off à beta (transmsision des tumeurs)
alpha=seq(from=0,to=0.5,length.out=10)
plot(alpha,betaTradeOff(alpha),type="l")
c=50
#	mortalité liée aux tumeurs lié par le trade off à beta (transmsision des tumeurs)
alpha=seq(from=0,to=0.5,length.out=10)
plot(alpha,betaTradeOff(alpha),type="l")
source("~/Mon Drive/dump/PIPV2.R")
Imutalpha
image (alpha,alpha,Imutalpha2<1,col=c("black","white"),xlab = "Alpha res",ylab = "Alpha mut",main="")
image (alpha,alpha,Imutalpha,col=c("black","white"),xlab = "Alpha res",ylab = "Alpha mut",main="")
Imutalpha
image (alpha,alpha,as.matrix(Imutalpha),col=c("black","white"),xlab = "Alpha res",ylab = "Alpha mut",main="")
Imutalpha2 <- matrix(Imutalpha, nrow = length(alpha), ncol = length(alpha))
image (alpha,alpha,Imutalpha2,col=c("black","white"),xlab = "Alpha res",ylab = "Alpha mut",main="")
Imutalpha<-Imutalpha[-1,]
#Couleur PIP
Imutalpha
Imutalpha2 <- matrix(0, nrow = length(alpha), ncol = length(alpha))
for (j in 1:length(S100)){
for (k in 1:length(alpha)){
Imutalpha2[j,k]<-ifelse(Imutalpha[j,k]<1,0,1)
}}
#trace du PIP
image (alpha,alpha,Imutalpha2<1,col=c("black","white"),xlab = "Alpha res",ylab = "Alpha mut",main="")
#Cleaning up data
rm(list=ls())
setwd("/Users/broche/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator")
# nolint
#loading libraries
library(sf)
library(ggplot2)
library(readxl)
library(RColorBrewer)
library(dplyr)
library(cowplot)
source("risk_category.R", encoding = "UTF-8")
#Loading shapefile
borders <- st_read("./GIS/world-administrative-boundaries.shp")
#Loading expert opinion data
opinionData <- read_xlsx("dataExpert.xlsx")
#Creating vectors for polygon information
polygonsWithInformation <- unique(opinionData$unitSelected[!is.na(opinionData$unitSelected)]);
#Converting into numerical values
opinionData$wildlifePressure <- as.numeric(opinionData$wildlifePressure)
opinionData$wildlifePressureTrust <- as.numeric(opinionData$wildlifePressureTrust)
opinionData$wildlifeContact <- as.numeric(opinionData$wildlifeContact)
opinionData$wildlifePressureTrust <- as.numeric(opinionData$wildlifePressureTrust)
opinionData$livestockPressure <- as.numeric(opinionData$livestockPressure)
opinionData$wildlifePressureTrust <- as.numeric(opinionData$livestockPressureTrust)
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
#Saving summary indices
wildlifePlot <- ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk")+
scale_fill_manual(values = palette1(n_distinct(as.factor(wildCirculationShape$Area))),breaks = all_values)
wildlifePlot
all_values
#Saving summary indices
wildlifePlot <- ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk")+
scale_fill_manual(values = palette1(n_distinct(wildCirculationShape$Area)),breaks = all_values)
wildlifePlot
#Saving summary indices
wildlifePlot <- ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk")+
scale_fill_manual(values = palette1(n_distinct(as.factor(wildCirculationShape$Area))),breaks = all_values)
wildlifePlot
#Saving summary indices
wildlifePlot <- ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk")+
scale_fill_manual(values = color_palette,breaks = all_values)
color_palette <- colorRampPalette(brewer.pal(9, "Reds"))(length(all_values))
#Saving summary indices
wildlifePlot <- ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk")+
scale_fill_manual(values = color_palette,breaks = all_values)
wildlifePlot
length(all_values)
ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk")+
scale_fill_manual(values = color_palette,breaks = all_values)
#Saving summary indices
wildlifePlot <- ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk")+
scale_fill_manual(values = color_palette,breaks = all_values, labels=as.character(all_values))
wildlifePlot
#Saving summary indices
wildlifePlot <- ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk",,breaks = all_values, labels=as.character(all_values))+
scale_fill_manual(values = color_palette)
wildlifePlot
#Saving summary indices
wildlifePlot <- ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
scale_fill_manual(values = color_palette,breaks = all_values, labels=as.character(all_values))
wildlifePlot
ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk")
ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk",breaks = all_values)
#Saving summary indices
wildlifePlot <- ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk")+
scale_fill_manual(values = color_palette,breaks = all_values)
wildlifePlot
#Saving summary indices
wildlifePlot <- ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk")+
scale_fill_manual(values = palette1,breaks = all_values)
wildlifePlot
#ColorPalette
palette1 <- colorRampPalette(brewer.pal(9, "Reds"))(length(all_values))
#Saving summary indices
wildlifePlot <- ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk")+
scale_fill_manual(values = palette1,breaks = all_values)
wildlifePlot
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
debugSource("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
