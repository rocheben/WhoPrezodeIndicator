occurencePb<- rep(NA,length(polygonsWithInformation));
dataPat <- opinionData[opinionData$pathogen==pathogen[j] & !is.na(opinionData$pathogen),]
#Calculating values for each polygon
for(i in 1:length(polygonsWithInformation)){
#Selecting information for this polygon
subsetData <- dataPat[dataPat$unitSelected==polygonsWithInformation[i] & !is.na(dataPat$unitSelected),]
#Calculating weighted average
temp <- subsetData$wildlifePressure[!is.na(subsetData$wildlifePressure)]*subsetData$wildlifePressureTrust[!is.na(subsetData$wildlifePressure)]/sum(subsetData$wildlifePressureTrust[!is.na(subsetData$wildlifePressure)]);
if(length(temp)>0){wildlifePressure[i] <- round(sum(temp, na.rm=T))};
temp <- subsetData$wildlifeContact[!is.na(subsetData$wildlifeContact)]*subsetData$wildlifeContactTrust[!is.na(subsetData$wildlifeContact)]/sum(subsetData$wildlifeContactTrust[!is.na(subsetData$wildlifeContact)]);
if(length(temp)>0){wildlifeContact[i] <- round(sum(temp,na.rm=T));}
temp <- subsetData$livestockPressure[!is.na(subsetData$livestockPressure)]*subsetData$livestockPressureTrust[!is.na(subsetData$livestockPressure)]/ sum(subsetData$livestockPressureTrust[!is.na(subsetData$livestockPressure)]);
if(length(temp)>0){livestockPressure[i] <- round(sum(temp,na.rm=T));}
temp <- subsetData$livestockContact[!is.na(subsetData$livestockContact)]*subsetData$livestockContactTrust[!is.na(subsetData$livestockContact)]/sum(subsetData$livestockContactTrust[!is.na(subsetData$livestockContact)]);
if(length(temp)>0){livestockContact[i] <- round(sum(temp,na.rm=T));}
}
#Calculating the color for each polygon with an estimation
for(i in 1:length(polygonsWithInformation)){
temp<-risk_category(wildlifePressure[i],wildlifeContact[i], livestockPressure[i],livestockContact[i],livestockWildlife[i]);
wildlifeRisk[i]<-temp[1];
livestockRisk[i]<-temp[2]
compositeRisk[i]<-temp[3]
subsetValid <- validationData[validationData$Country==polygonsWithInformation[i],]
occurenceNb[i] <- length(subsetValid$Country)
occurencePb[i] <- length(unique(subsetValid$Year))/5
#occurenceNb[i] <- validationData[i]$
#OccurencePb<- rep(NA,length(polygonsWithInformation));
}
i=1
temp<-risk_category(wildlifePressure[i],wildlifeContact[i], livestockPressure[i],livestockContact[i],livestockWildlife[i]);
temp
wildlifeRisk[i]<-temp[1];
livestockRisk[i]<-temp[2]
compositeRisk[i]<-temp[3]
subsetValid <- validationData[validationData$Country==polygonsWithInformation[i],]
subsetValid
unique(validationData$country)
#Conversion country code
validationData$country[validationData$country=="ARE"]="United Arab Emirates";
validationData$country[validationData$country=="SAU"]="Saudi Arabia";
validationData$country[validationData$country=="KEN"]="Kenya";
validationData$country[validationData$country=="OMN"]="Oman";
validationData$country[validationData$country=="EGY"]="Egypt";
validationData$country[validationData$country=="SDN"]="Sudan";
validationData$country[validationData$country=="ZAF"]="South Africa";
validationData$country[validationData$country=="Italy"]="Italy";
validationData$country[validationData$country=="MLI"]="Mali";
validationData$country[validationData$country=="KOR"]="Republic of Korea";
validationData$country[validationData$country=="UGA"]="Uganda";
validationData$country[validationData$country=="NGA"]="Nigeria";
validationData$country[validationData$country=="TUN"]="Tunisia";
validationData$country[validationData$country=="ETH"]="Ethiopia";
validationData$country[validationData$country=="JOR"]="Jordan";
validationData$country[validationData$country=="QAT"]="Qatar";
validationData$country[validationData$country=="MYS"]="Malaysia";
validationData$country[validationData$country=="SOM"]="Somalia";
validationData$country[validationData$country=="CHN"]="China";
validationData$country[validationData$country=="ESP"]="Spain";
validationData$country[validationData$country=="BFA"]="Bukina Faso";
validationData$country[validationData$country=="MAR"]="Morocco";
validationData$country[validationData$country=="PAK"]="Pakistan";
validationData$country[validationData$country=="BHR"]="Bahrain";
validationData$country[validationData$country=="KWT"]="Kuwait";
validationData$country[validationData$country=="BGD"]="Bangladesh";
validationData$country[validationData$country=="IRN"]="Iran (Islamic Republic of)";
validationData$country[validationData$country=="ISR"]="Israel";
validationData$country[validationData$country=="IRQ"]="Iraq";
i=1
temp<-risk_category(wildlifePressure[i],wildlifeContact[i], livestockPressure[i],livestockContact[i],livestockWildlife[i]);
wildlifeRisk[i]<-temp[1];
livestockRisk[i]<-temp[2]
compositeRisk[i]<-temp[3]
subsetValid <- validationData[validationData$Country==polygonsWithInformation[i],]
subsetValid
#Calculating the color for each polygon with an estimation
for(i in 1:length(polygonsWithInformation)){
temp<-risk_category(wildlifePressure[i],wildlifeContact[i], livestockPressure[i],livestockContact[i],livestockWildlife[i]);
wildlifeRisk[i]<-temp[1];
livestockRisk[i]<-temp[2]
compositeRisk[i]<-temp[3]
subsetValid <- validationData[validationData$Country==polygonsWithInformation[i],]
occurenceNb[i] <- length(subsetValid$Country)
occurencePb[i] <- length(unique(subsetValid$Year))/5
#occurenceNb[i] <- validationData[i]$
#OccurencePb<- rep(NA,length(polygonsWithInformation));
}
occurenceNb
#Calculating the color for each polygon with an estimation
for(i in 1:length(polygonsWithInformation)){
temp<-risk_category(wildlifePressure[i],wildlifeContact[i], livestockPressure[i],livestockContact[i],livestockWildlife[i]);
wildlifeRisk[i]<-temp[1];
livestockRisk[i]<-temp[2]
compositeRisk[i]<-temp[3]
subsetValid <- validationData[validationData$country==polygonsWithInformation[i],]
occurenceNb[i] <- length(subsetValid$country)
#occurenceNb[i] <- validationData[i]$
#OccurencePb<- rep(NA,length(polygonsWithInformation));
}
occurenceNb
i=1
subsetValid <- validationData[validationData$country==polygonsWithInformation[i],]
i
subsetValid
occurenceNb[i] <- length(subsetValid$country,na.rm=T)
subsetValid$country
?length
length(subsetValid$country)
length(subsetValid$country,na.rm=T)
length(subsetValid$country[!is.na(subsetValid$country)],na.rm=T)
length(subsetValid$country[!is.na(subsetValid$country)])
#Calculating the color for each polygon with an estimation
for(i in 1:length(polygonsWithInformation)){
temp<-risk_category(wildlifePressure[i],wildlifeContact[i], livestockPressure[i],livestockContact[i],livestockWildlife[i]);
wildlifeRisk[i]<-temp[1];
livestockRisk[i]<-temp[2]
compositeRisk[i]<-temp[3]
subsetValid <- validationData[validationData$country==polygonsWithInformation[i],]
occurenceNb[i] <- length(subsetValid$country[!is.na(subsetValid$country)])
#occurenceNb[i] <- validationData[i]$
#OccurencePb<- rep(NA,length(polygonsWithInformation));
}
occurenceNb
plot(compositeRisk,occurenceNb)
plot(compositeRisk,sqrt(occurenceNb))
cor.test(compositeRisk,sqrt(occurenceNb))
occurenceNb=occurenceNb/max(occurenceNb)
plot(occurenceNb)
#Calculating the color for each polygon with an estimation
for(i in 1:length(polygonsWithInformation)){
temp<-risk_category(wildlifePressure[i],wildlifeContact[i], livestockPressure[i],livestockContact[i],livestockWildlife[i]);
wildlifeRisk[i]<-temp[1];
livestockRisk[i]<-temp[2]
compositeRisk[i]<-temp[3]
subsetValid <- validationData[validationData$country==polygonsWithInformation[i],]
occurenceNb[i] <- length(subsetValid$country[!is.na(subsetValid$country)])
#occurenceNb[i] <- validationData[i]$
#OccurencePb<- rep(NA,length(polygonsWithInformation));
}
occurenceNb=sqrt(occurenceNb)/max(sqrt(occurenceNb))
plot(occurenceNb)
plot(compositeRisk,occurenceNb)
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
# Graphique avec ggplot
ggplot(df, aes(x = value, color = group, fill = group)) +
geom_density(alpha = 0.5) +  # Courbes de densité avec transparence
theme_minimal() +             # Thème du graphique (minimaliste)
labs(
x = "Value",                # Titre de l'axe x
y = "Density",              # Titre de l'axe y
title = "Density Plot of Three Groups (Different Lengths)"  # Titre du graphique
) +
scale_color_manual(values = c("Group 1" = "blue", "Group 2" = "green", "Group 3" = "red")) +  # Couleurs spécifiques pour les courbes
scale_fill_manual(values = c("Group 1" = "blue", "Group 2" = "green", "Group 3" = "red"))     # Remplissage des zones sous les courbes
# Graphique avec ggplot
ggplot(df, aes(x = value, color = group, fill = group)) +
geom_density(alpha = 0.5) +  # Courbes de densité avec transparence
theme_minimal() +             # Thème du graphique (minimaliste)
labs(
x = "Value",                # Titre de l'axe x
y = "Density",              # Titre de l'axe y
title = "Density Plot of Three Groups (Different Lengths)"  # Titre du graphique
) +
scale_color_manual(values = c("All" = "blue", "No Occurence" = "green", "Occurence" = "red")) +  # Couleurs spécifiques pour les courbes
scale_fill_manual(values = c("All" = "blue", "No Occurence" = "green", "Occurence" = "red"))     # Remplissage des zones sous les courbes
# Création d'un data frame pour ggplot
df <- data.frame(
value = c(data1, data2, data3),
group = factor(rep(c("All", "No Occurence", "Occurence"), each = max_length))
)
# Supprimer les lignes avec des valeurs manquantes
df <- df[complete.cases(df), ]
# Graphique avec ggplot
ggplot(df, aes(x = value, color = group, fill = group)) +
geom_density(alpha = 0.5) +  # Courbes de densité avec transparence
theme_minimal() +             # Thème du graphique (minimaliste)
labs(
x = "Value",                # Titre de l'axe x
y = "Density",              # Titre de l'axe y
title = "Density Plot of Three Groups (Different Lengths)"  # Titre du graphique
) +
scale_color_manual(values = c("All" = "blue", "No Occurence" = "green", "Occurence" = "red")) +  # Couleurs spécifiques pour les courbes
scale_fill_manual(values = c("All" = "blue", "No Occurence" = "green", "Occurence" = "red"))     # Remplissage des zones sous les courbes
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
# Graphique avec ggplot
ggplot(df, aes(x = value, color = group, fill = group)) +
geom_density(alpha = 0.5) +  # Courbes de densité avec transparence
theme_minimal() +             # Thème du graphique (minimaliste)
labs(
x = "Value",                # Titre de l'axe x
y = "Density",              # Titre de l'axe y
title = "Density Plot of Three Groups (Different Lengths)"  # Titre du graphique
) +
scale_color_manual(values = c("All" = "blue", "No Occurence" = "green", "Occurence" = "red")) +  # Couleurs spécifiques pour les courbes
scale_fill_manual(values = c("All" = "blue", "No Occurence" = "green", "Occurence" = "red"))     # Remplissage des zones sous les courbes
validationDataAiv <- read_xlsx("aiv.xlsx")
validationDataAiv$Country
#Checking country name (expert data - validation data)
for(i in 1:length(polygonsWithInformation)){
if(length(validationDataAiv$Country[validationDataAiv$Country==polygonsWithInformation[i]])==0){
print(polygonsWithInformation[i])
}
}
#Checking country name (expert data - validation data)
for(i in 1:length(validationDataAiv$Country)){
if(length(polygonsWithInformation[polygonsWithInformation==validationDataAiv$Country[i]])==0){
print(validationDataAiv$Country[i])
}
}
unique(polygonsWithInformation)
which(polygonsWithInformation=="Israel")
which(polygonsWithInformation=="Hong King")
which(polygonsWithInformation=="Hong Kong")
??ggsave
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
validationDataAiv[validationDataAiv$Year>2010,]
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
#Cleaning up data
rm(list=ls())
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
j
#Initializing
wildlifePressure <- rep(NA,length(polygonsWithInformation));
wildlifeContact <- rep(NA,length(polygonsWithInformation));
livestockPressure <- rep(NA,length(polygonsWithInformation));
livestockContact <- rep(NA,length(polygonsWithInformation));
livestockWildlife <- rep(NA,length(polygonsWithInformation));
livestockRisk <- rep(NA,length(polygonsWithInformation));
wildlifeRisk<- rep(NA,length(polygonsWithInformation));
compositeRisk<- rep(NA,length(polygonsWithInformation));
dataPat <- opinionData[opinionData$pathogen==pathogen[j] & !is.na(opinionData$pathogen),]
#Calculating values for each polygon
for(i in 1:length(polygonsWithInformation)){
#Selecting information for this polygon
subsetData <- dataPat[dataPat$unitSelected==polygonsWithInformation[i] & !is.na(dataPat$unitSelected),]
#Calculating weighted average
temp <- subsetData$wildlifePressure[!is.na(subsetData$wildlifePressure)]*subsetData$wildlifePressureTrust[!is.na(subsetData$wildlifePressure)]/sum(subsetData$wildlifePressureTrust[!is.na(subsetData$wildlifePressure)]);
if(length(temp)>0){wildlifePressure[i] <- round(sum(temp, na.rm=T))};
temp <- subsetData$wildlifeContact[!is.na(subsetData$wildlifeContact)]*subsetData$wildlifeContactTrust[!is.na(subsetData$wildlifeContact)]/sum(subsetData$wildlifeContactTrust[!is.na(subsetData$wildlifeContact)]);
if(length(temp)>0){wildlifeContact[i] <- round(sum(temp,na.rm=T));}
temp <- subsetData$livestockPressure[!is.na(subsetData$livestockPressure)]*subsetData$livestockPressureTrust[!is.na(subsetData$livestockPressure)]/ sum(subsetData$livestockPressureTrust[!is.na(subsetData$livestockPressure)]);
if(length(temp)>0){livestockPressure[i] <- round(sum(temp,na.rm=T));}
temp <- subsetData$livestockContact[!is.na(subsetData$livestockContact)]*subsetData$livestockContactTrust[!is.na(subsetData$livestockContact)]/sum(subsetData$livestockContactTrust[!is.na(subsetData$livestockContact)]);
if(length(temp)>0){livestockContact[i] <- round(sum(temp,na.rm=T));}
}
#Calculating the color for each polygon with an estimation
for(i in 1:length(polygonsWithInformation)){
temp<-risk_category(wildlifePressure[i],wildlifeContact[i], livestockPressure[i],livestockContact[i],livestockWildlife[i]);
wildlifeRisk[i]<-temp[1];
livestockRisk[i]<-temp[2]
compositeRisk[i]<-temp[3]
}
#creating the output shape file
#Setting all the polygons to the NULL value
wildCirculationShape <- borders;wildCirculationShape$Area <-rep(NA,length(polygonsWithInformation));
#creating the output shape file
#Setting all the polygons to the NULL value
wildCirculationShape <- borders;
wildCirculationShape$Area <-rep(NA,length(polygonsWithInformation));
wildCirculationShape$Area <-rep(NA,length(wildCirculationShape$iso3));
#creating the output shape file
#Setting all the polygons to the NULL value
wildCirculationShape <- borders;wildCirculationShape$Area <-rep(NA,length(wildCirculationShape$iso3));
livestockCirculationShape <- borders;livestockCirculationShape$Area <-rep(NA,length(livestockCirculationShape$iso3));
compositeShape <- borders;compositeShape$Area <-rep(NA,length(livestockCirculationShape$iso3));
#Setting the polygons summary indices
for(i in 1:length(polygonsWithInformation)){
wildCirculationShape$Area[wildCirculationShape$name==polygonsWithInformation[i]] <- wildlifeRisk[i]
livestockCirculationShape$Area[livestockCirculationShape$name==polygonsWithInformation[i]] <- livestockRisk[i]
compositeShape$Area[compositeShape$name==polygonsWithInformation[i]] <- compositeRisk[i]
}
source("sources/plotMap.R");
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
cd()
getwd()
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
?trimws
paste("./figures/",pathogen[j], "_wildlifePlot.pdf")
trimws(paste("./figures/",pathogen[j], "_wildlifePlot.pdf"))
trimws(paste("./figures/",pathogen[j], "_wildlifePlot.pdf"))
x <- "  Some text. "
x
trimws(x)
str <- "Now is the time      "
sub(" +$", "", str)  ## spaces only
## what is considered 'white space' depends on the locale.
sub("[[:space:]]+$", "", str) ## white space, POSIX-style
## what PCRE considered white space changed in version 8.34: see ?regex
sub("\\s+$", "", str, perl = TRUE) ## PCRE-style white space
str <- "Now is the time      "
sub(" +$", "", str)  ## spaces only
## what is considered 'white space' depends on the locale.
sub("[[:space:]]+$", "", str) ## white space, POSIX-style
## what PCRE considered white space changed in version 8.34: see ?regex
sub("\\s+$", "", str, perl = TRUE) ## PCRE-style white space
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/sources/plotMap.R")
paste0("./figures/",pathogen[j], "_wildlifePlot.pdf")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
warnings()
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
i
j
#Initializing
wildlifePressure <- rep(NA,length(polygonsWithInformation));
wildlifeContact <- rep(NA,length(polygonsWithInformation));
livestockPressure <- rep(NA,length(polygonsWithInformation));
livestockContact <- rep(NA,length(polygonsWithInformation));
livestockWildlife <- rep(NA,length(polygonsWithInformation));
livestockRisk <- rep(NA,length(polygonsWithInformation));
wildlifeRisk<- rep(NA,length(polygonsWithInformation));
compositeRisk<- rep(NA,length(polygonsWithInformation));
dataPat <- opinionData[opinionData$pathogen==pathogen[j] & !is.na(opinionData$pathogen),]
#Calculating values for each polygon
for(i in 1:length(polygonsWithInformation)){
#Selecting information for this polygon
subsetData <- dataPat[dataPat$unitSelected==polygonsWithInformation[i] & !is.na(dataPat$unitSelected),]
#Calculating weighted average
wildlifePressure[i] <- weightedAverage(subsetData$wildlifePressure[i],subsetData$wildlifePressureTrust[i])
wildlifeContact[i] <- weightedAverage(subsetData$wildlifeContact[i],subsetData$wildlifeContactTrust[i])
livestockPressure[i] <- weightedAverage(subsetData$livestockPressure[i],subsetData$livestockPressureTrust[i])
livestockContact[i] <- weightedAverage(subsetData$livestockContact[i],subsetData$livestockContactTrust[i])
}
#Calculating the color for each polygon with an estimation
for(i in 1:length(polygonsWithInformation)){
temp<-risk_category(wildlifePressure[i],wildlifeContact[i], livestockPressure[i],livestockContact[i],livestockWildlife[i]);
wildlifeRisk[i]<-temp[1];
livestockRisk[i]<-temp[2]
compositeRisk[i]<-temp[3]
}
#creating the output shape file
#Setting all the polygons to the NULL value
wildCirculationShape <- borders;wildCirculationShape$Area <-rep(NA,length(wildCirculationShape$iso3));
livestockCirculationShape <- borders;livestockCirculationShape$Area <-rep(NA,length(livestockCirculationShape$iso3));
compositeShape <- borders;compositeShape$Area <-rep(NA,length(livestockCirculationShape$iso3));
#Setting the polygons summary indices
for(i in 1:length(polygonsWithInformation)){
wildCirculationShape$Area[wildCirculationShape$name==polygonsWithInformation[i]] <- wildlifeRisk[i]
livestockCirculationShape$Area[livestockCirculationShape$name==polygonsWithInformation[i]] <- livestockRisk[i]
compositeShape$Area[compositeShape$name==polygonsWithInformation[i]] <- compositeRisk[i]
}
source("sources/plotMap.R");
#Colors palette
all_values<-c(seq(0,9),NA)
wildCirculationShape$Area <- factor(wildCirculationShape$Area, levels = all_values)
livestockCirculationShape$Area <- factor(livestockCirculationShape$Area, levels = all_values)
compositeShape$Area <- factor(compositeShape$Area, levels = all_values)
palette1 <- colorRampPalette(brewer.pal(9, "Reds"))(length(all_values))
palette2 <- colorRampPalette(brewer.pal(9, "Blues"))(length(all_values))
palette3 <- colorRampPalette(brewer.pal(9, "Purples"))(length(all_values))
#Plotting summary indices
wildlifePlot <- ggplot() +
geom_sf(data = wildCirculationShape, aes(fill = as.factor(Area))) +
theme_minimal()+labs(fill = "Wildlife aggregated risk")+
scale_fill_manual(values = palette1,breaks = all_values)
ggsave(paste0("./figures/",pathogen[j], "_wildlifePlot.pdf"),wildlifePlot,width = 10, height = 5, dpi = 150, units = "in");
st_write(obj = wildCirculationShape, dsn=paste0("./figures/resultsWildlife_",pathogen[j],".shp"))
?st_write
st_write(obj = wildCirculationShape, dsn=paste0("./figures/resultsWildlife_",pathogen[j],".shp"),delete_dsn=T)
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
#Cleaning up data
rm(list=ls())
setwd("/Users/broche/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator")
#loading libraries
library(sf)
library(ggplot2)
library(readxl)
library(RColorBrewer)
library(dplyr)
library(cowplot)
source("sources/risk_category.R", encoding = "UTF-8")
source("sources/weightedAverage.R")
#Loading shapefile
borders <- st_read("./GIS/world-administrative-boundaries.shp")
#Loading expert opinion data
opinionData <- read_xlsx("./data/dataExpert.xlsx")
#Creating vectors for polygon information
polygonsWithInformation <- unique(opinionData$unitSelected[!is.na(opinionData$unitSelected)]);
#Converting into numerical values
opinionData$wildlifePressure <- as.numeric(opinionData$wildlifePressure)
opinionData$wildlifePressureTrust <- as.numeric(opinionData$wildlifePressureTrust)
opinionData$wildlifeContact <- as.numeric(opinionData$wildlifeContact)
opinionData$wildlifePressureTrust <- as.numeric(opinionData$wildlifePressureTrust)
opinionData$livestockPressure <- as.numeric(opinionData$livestockPressure)
opinionData$wildlifePressureTrust <- as.numeric(opinionData$livestockPressureTrust)
opinionData$livestockContact <- as.numeric(opinionData$livestockContact)
opinionData$wildlifeContactTrust <- as.numeric(opinionData$livestockContactTrust)
opinionData$wildlifelivestockContact <- as.numeric(opinionData$wildlifelivestockContact)
opinionData$livestockWildlifeContactTrust <- as.numeric(opinionData$livestockWildlifeContactTrust)
pathogen <- c("AIV","WNV","CCHF","MERS")
j<-1
#Initializing
wildlifePressure <- rep(NA,length(polygonsWithInformation));
wildlifeContact <- rep(NA,length(polygonsWithInformation));
livestockPressure <- rep(NA,length(polygonsWithInformation));
livestockContact <- rep(NA,length(polygonsWithInformation));
livestockWildlife <- rep(NA,length(polygonsWithInformation));
livestockRisk <- rep(NA,length(polygonsWithInformation));
wildlifeRisk<- rep(NA,length(polygonsWithInformation));
compositeRisk<- rep(NA,length(polygonsWithInformation));
dataPat <- opinionData[opinionData$pathogen==pathogen[j] & !is.na(opinionData$pathogen),]
#Calculating values for each polygon
for(i in 1:length(polygonsWithInformation)){
#Selecting information for this polygon
subsetData <- dataPat[dataPat$unitSelected==polygonsWithInformation[i] & !is.na(dataPat$unitSelected),]
#Calculating weighted average
wildlifePressure[i] <- weightedAverage(subsetData$wildlifePressure[i],subsetData$wildlifePressureTrust[i])
wildlifeContact[i] <- weightedAverage(subsetData$wildlifeContact[i],subsetData$wildlifeContactTrust[i])
livestockPressure[i] <- weightedAverage(subsetData$livestockPressure[i],subsetData$livestockPressureTrust[i])
livestockContact[i] <- weightedAverage(subsetData$livestockContact[i],subsetData$livestockContactTrust[i])
}
wildlifePressure
length(polygonsWithInformation)
j
i=4
#Selecting information for this polygon
subsetData <- dataPat[dataPat$unitSelected==polygonsWithInformation[i] & !is.na(dataPat$unitSelected),]
#Calculating weighted average
wildlifePressure[i] <- weightedAverage(subsetData$wildlifePressure[i],subsetData$wildlifePressureTrust[i])
wildlifePressure[i]
wildlifePressure[i]subsetData
subsetData
subsetData$wildlifePressure
#Calculating weighted average
wildlifePressure[i] <- weightedAverage(subsetData$wildlifePressure,subsetData$wildlifePressureTrust)
wildlifePressure[i]
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/analyseExpertData.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/dataDescription.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/dataDescription.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/dataDescription.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/dataDescription.R")
dev.off();
dev.off();
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/dataDescription.R")
#Loading expert opinion data
opinionData <- read_xlsx("data/dataExpert.xlsx")
#Cleaning up data
rm(list=ls())
#loading libraries
library(sf)
library(ggplot2)
library(pheatmap)
library(readxl)
setwd("/Users/broche/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator")
#Loading shapefile
borders <- st_read("GIS/world-administrative-boundaries.shp")
#Loading expert opinion data
opinionData <- read_xlsx("data/dataExpert.xlsx")
unique(opinionData$participantId)
length(unique(opinionData$participantId))
length(opinionData$participantId)
length(unique(opinionData$participantId[opinionData$participantId!="282dbe47"]))
length(opinionData$participantId[opinionData$participantId!="282dbe47"])
#Loading expert opinion data
opinionData <- read_xlsx("data/dataExpert.xlsx")
opinionData <- opinionData[opinionData$participantId!="282dbe47",]
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/dataDescription.R")
length(opinionData$pathogen=="AIV")
length(opinionData$pathogen=="MERS")
length(opinionData[opinionData$pathogen=="MERS",1])
length(opinionData$pathogen[opinionData$pathogen=="MERS"])
length(opinionData$pathogen[opinionData$pathogen=="MERS"])
length(opinionData$pathogen[opinionData$pathogen=="AIV"])
length(opinionData$pathogen[opinionData$pathogen=="CCHF"])
length(opinionData$pathogen[opinionData$pathogen=="WNV"])
opinionData <- read_xlsx("data/dataExpert.xlsx")
length(opinionData$pathogen[opinionData$pathogen=="MERS"])
length(opinionData$pathogen[opinionData$pathogen=="AIV"])
length(opinionData$pathogen[opinionData$pathogen=="CCHF"])
length(opinionData$pathogen[opinionData$pathogen=="WNV"])
#Loading expert opinion data
opinionData <- read_xlsx("data/dataExpert.xlsx")
opinionData <- opinionData[opinionData$participantId!="282dbe47",]
length(opinionData$wildlifePressure[opinionData$wildlifePressure==0])
length(opinionData$wildlifePressure[opinionData$livestockPressure==0])
length(opinionData$wildlifePressure[opinionData$wildlifeContact==0])
length(opinionData$wildlifePressure[opinionData$livestockContact==0])
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
debugSource("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
t.test(data2,data3)
t.test(data2,data3)
debugSource("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
source("~/Mon Drive/Docs/ResearchWorks/Moi - Indicateur Zoonoses/Analyse/WhoPrezodeIndicator/validationIndicator.R")
